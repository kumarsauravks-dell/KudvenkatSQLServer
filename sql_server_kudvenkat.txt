#Ref Video 1,2
- Navigate to Object Explorer
	View -> Object Explorer
- Whenever we create a database 2 files gets generated.
	.MDF file ->Master Data File(Contains actual data)
	.LDF file ->Log Data File -> Transaction Log File(Used to recover the database)

- Common Database Query
	Create -> create database DatabaseName
	Delete -> drop database DatabaseName
	Use -> use DatabaseName
- Rename a Database 
	alter database DatabaseName modify name = NewDatabaseName 
	execute sp_renamedb 'OldDatabaseName' , 'NewDatabaseName'
- When multiple users are using a single database and we want to remove it.
	alter database DatabaseName set single_user with rollback immidiate

---------------------
#Ref Video 3,4
-Primary Key
	-used to unequely identify each record in a table.
	
- Create a table graphically
	- expand database -> expand table -> 
		-> right click on Table folder -> New ->Table
		-> enter record -> column name ,data type -> right click on left most symbol -> set primary key
		-> right click on tab top -> Save Table1 -> Give Name+Enter

- Create a table using query
	create table tblGender(
	Id int not null primary key,
	Gender nvarchar(50) not null
	)

- insert data using the designer
	- Right click on the table -> Edit Top 200 Rows

- To force database integity we use foreign key relationship.
	- If we make the GenderId as foreign key in tblPerson table, it will not accept a value which is not defined in tblGender table like 99.

- Set foreign key graphically 
	Right click on table -> Design -> Left most to the column -> right click and select Relationships ->  Add -> Table and column specification
	-> Set the primary key column, foreign key column 

- Set foreign key using query
	alter table tblPerson add constraint tblPerson_GenderId_FK foreign key (GenderId) references tblGender(Id)

- Default constraint
	If a column can accept null value, in case if we dont want to store null when no value is supplied , we can give it av default value
	eg : alter table tblPerson add constraint DF_tblPerson_GenderId default 3 for GenderId
	Note : If you dont supply a value for GenderId then only it will assign a default value , if you intentianally set null value to it then it will assign null and not the default value 3, it will work only if you miss to supply a value .

- Adding a new column , with default value to an exisiting table.
	alter table TABLENAME add COLUMNNAME DATATYPE NULL|NOT NULL CONSTRAINTNAME default DEFAULTVALUE

- Dropping a constraint
	alter table TABLENAME drop constraint CONSTRAINTNAME

-------------------------------
#Ref Video 5
- Cascading Referential Integrity
	-tblPerson has a foreign key of GenderId , what if we delete the record from tblGender which is refering to tblPerson 
	-we have four options in this case
		- No Action -> Delete/Update is rolled back
		- Casacade -> all rows containing those foreign key are also deleted or updated.
		- Set Null -> all rows containing those foreign key are set to null.
		- Set Default -> all rows containing those foreign key are set to default value defined in default constraint.

	-how to set one of these options
		Right click on tblPerson -> expand the Keys folder -> Right click on foreign key -> Modify -> Insert and Update specification -> change the delete and update rule.

--------------------------------
#Ref Video 6
- Check constraint graphically
	- to add a check constraint -> Right click on the constraint folder inside the table -> New constraint
		-> in the Expession , write the condition like : Age>0 And Age<150
		-> Save 
		-> If we will intentianally inserting null , check constraint will not work and data will get inserted.

- Check constraint using query
	- alter table TABLENAME add constraint CONSTRAINTNAME check BOOLEAN_EXPRESSION
	- alter table tblEmp add constraint CK_tblEmp_Age check (Age>0 and Age<150)

----------------------------------
#Ref Video 7,8
- Identity column
	- how to check if a column is an identity column?
		Right click on the column -> Select Properties -> Identity (true/false)
	- set a column to be an identity column
		-using the designer 
			Select the column -> Modify -> In Column Properties window -> Identity Spectification -> set Is Identity to True, Identity Increment to 1, Identity Seed to 1
		-using Query
			PId int identity(1,1) primary key

- Reuse the old id if deleted in identity column
	Normally if an id is deleted it is not reused when a new record is inserted , to reuse it:
	- set identity_insert tblPerson1 on
	- insert into tblPerson1(PId,Name) values (1,'Martha')
	- Note : Once identity_insert is on we cant able to insert like : insert into tblPerson1 values ('Mary')
				But to do so we have to set identity_insert tblPerson1 off

- Delete all the record from a table
	query :- delete from tblPerson1
	- after deletion of all records when we insert a new record it start just after the last identity value.
		to correct it we can use query :- dbcc checkident(tblPerson1,reseed,0)

	
- Difference between SCOPE_IDENTITY() and @@IDENTITY 
	- SCOPE_IDENTITY() -> returns the last generated identity of same session and same scope.
		same session means jo connection hum open kiye matlab New Query window . Same scope means main scope koi sub scope nhi.
	- @@IDENTITY -> returns the last identity of same session across any scope.
		any scope means sub ya last inserted record ka scope.
	- IDENT_CURRENT('TableName') - specific table across any session and any scope.

----------------------
#Ref Video 9
- Unique key 
	kisi column k uniqueness k liye hum primary key ya unique key ko use krte hain.
	kisi table me Id , email , pan_number sare column ko uniqune hi rhna chaiye but ek se jada primary key nhi ho skte ek table me , isliye aur sare unique key.
	primary key does not allow any null but unique key has only one null.

	- set unique key using designer
		Right click on table -> Design -> Select any column -> Indexes/Keys -> Add -> Set Columns : column , Type : Unique Key , Name : UQ_tableName_ColumnName 

	- set unique key using query
		alter table tblEmp1 add constraint UQ_tblEmp1_Phone Unique(Phone)

	- delete unique key constraint 
		alter table tblEmp1 drop constraint UQ_tblEmp1_Phone

------------------------
#Ref Video 10
    - specific column or all columns
		- using designer
			Right click on table -> Script Table As -> Select To -> New Query Editor window
    - distinct rows
		select distinct city from tblPerson

    - filtering with where clause
		select * from tblPerson where City='London'

		select * from tblPerson where City<>'London'
		select * from tblPerson where City!='London'

		select * from tblPerson where Age = 20 or Age = 23 or Age = 29 
		select * from tblPerson where Age in  (20,23,29)

		select * from tblPerson where Age BETWEEN 20 And 25

		select * from tblPerson where City like 'L%'
		select * from tblPerson where Email not like'%@%'

    - wild cards in Sql
		% -> any number of character eg: like %@%
		_ -> exactly one character eg: like _@_ 
		[] -> should start with M,S,T eg: like '[MST]%'
		[^] -> should not start with M,S,T eg: like '[^MST]%'

    - joining multiple constraints using AND and OR operators
		select * from tblPerson where (City = 'London' or City = 'Mumbai') AND Age > 25

    - sorting rows using order by
		select * from tblPerson order by Name -> sorting names in alphabatical order
		select * from tblPerson order by Name DESC
		select * from tblPerson order by Name DESC, Age DESC -> Jab 2 ya 2 se jada same name milega to uska sorting age k hisab se hoga.

    - selecting top n or top n percentage of rows 
		select top 10 * from tblPerson
		select top 10 Name,Age from tblPerson
		select top 1 Percent * from tblPerson
		select top 1 * from tblPerson order by Age DESC

-----------------------
#Ref Video 11
	- aggregate function 
		select Sum(Salary) from tblEmployee
		select Min(Salary) from tblEmployee
		select Max(Salary) from tblEmployee

	- group by clause can be used with aggregate function
		- select totalsalary of employees city wise( group by single column)
			select City,Sum(Salary) as TotalSalary from tblEmp2 group by City 
		- select total salary of employees city wise as well as gender wise(group by multiple columns)
			select City, Gender, Sum(salary) as TotalSalary from tblEmp2 group by City,Gender order by City
		- select total salary,total employees city wise as well as gender wise
			select City, Gender, Sum(salary) as TotalSalary,COUNT(id) as NumberOfEmployees from tblEmp2 group by City,Gender order by city,gender
		- Note : to add spaces in column namewe can use [] like [Number of Employees]

		- having is used to filter the data, same as where clause but is used after the group by clause.
			select City, Gender, Sum(salary) as TotalSalary,COUNT(id) as NumberOfEmployees from tblEmp2 group by City,Gender Having Gender='Male'

		- we can not use aggregate function with where clause like
			select * from tblEmp2 where Sum(Salary) > 4000
		
		-  summary
			- where can be used with select,insert and update statements, having can be only used with select statement.
			- where filters rows before aggregation(Grouping) , having groups after aggregation.
			- aggregate function can not be used in where clause unless it is in a sub query contained in a having clause, aggregate functions can be used in having clause.

-------------------
#Ref Video 12
	- Joins -> are used to retrieve data from 2 or more related tables. In general tables are related to each other using foreign key constraints.
	- Inner Join -> returns only the matching rowsbetween both the tables. Non matching rows are eliminated.
	- query to join employee and department to show DepartmentName Against employee
		select Name,Gender,Salary,DepName from tableEmployee join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id

	- Left Join -> returns all the matching rows + non matching rows from the left table
	- query to join employee and department to show the matching and non matching employee records with DepartmentName
		select Name,Gender,Salary,DepName from tableEmployee left join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id

	- Right Join -> returns all the matching rows + non matching rows from the right table.
	- query to join employee and department to show the matching and non matching rows from department table
		select Name,Gender,Salary,DepName from tableEmployee right join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id

	- Full Join -> returns all rows from both the left and right tables, including the non mathing rows.

	- Cross Join -> produces the cartesian product of the two tables involved in the join
		if employee table has 10rows and department table has 4 rows , cross join will produce 40 rows.
		cross join does not have on clause
		select Name,Gender,Salary,DepName from tableEmployee cross join tableDepartment

	- Note : Join or Inner Join are same, Left Join or Left Outer Join are same
			 Right Join or Right Outer Join are same, Full Join or Full Outer Join are same

--------------------
#Ref Video 13
	- query to select only non matching rows from left table 
		select Name,Gender,Salary,DepName from tableEmployee left join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id where tableDepartment.Id is null
		select Name,Gender,Salary,DepName from tableEmployee left join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id where tableEmployee.DepartmentId is null

	- query to select only non matching rows from right table.
		select Name,Gender,Salary,DepName from tableEmployee right join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id where tableEmployee.DepartmentId is null

	- query to select only non mathing rows from both the table
		select Name,Gender,Salary,DepName from tableEmployee full join tableDepartment on tableEmployee.DepartmentId=tableDepartment.Id where tableEmployee.DepartmentId is null

----------------------
#Ref Video 14
	- Self Join -> Joining a table with itself
	- Lets say we have table like :-
	EmployeeId	Name	ManagerId
	1			Mike    3
	2			Rob     1
	3			Todd    NULL
	4			Ben     1
	5			Sam		1

	- left outer self join
		select E.Name as Employee,M.Name as Manager from tableEmployee1 E left join tableEmployee1 M on E.ManagerId=M.EmployeeId

	- inner join
		select E.Name as Employee,M.Name as Manager from tableEmployee1 E join tableEmployee1 M on E.ManagerId=M.EmployeeId

	- cross join 
		select E.Name as Employee,M.Name as Manager from tableEmployee1 E cross join tableEmployee1 M 

-------------------------
#Ref Video 15,16
	Different ways to replace NULL in Sql 
    - ISNULL() function
		select isnull(null,'No Manager') as Manager
		select isnull('Pragim','No Manager') as Manager

		select E.Name as Employee,isnull(M.Name,'No Manager') as Manager from tableEmployee1 E left join tableEmployee1 M on E.ManagerId=M.EmployeeId
    
	- Case statement
		select E.Name as Employee,case when M.Name is null then 'No Manager' else M.Name end as Manager from tableEmployee1 E left join tableEmployee1 M on E.ManagerId=M.EmployeeId

    - COALESCE() function
		- Similar to isnull
			select E.Name as Employee,coalesce(M.Name,'No Manager') as Manager from tableEmployee1 E left join tableEmployee1 M on E.ManagerId=M.EmployeeId

		- Returns the first non null value.
			select Id , coalesce(FirstName,MiddleName,LastName) as Name from tableEmployee2

---------------------------
#Ref Video 17
	Union and Union All	
		- operators used to combine result set of two or more select queries.
		- the number,data types, order of columns in the select statement need to be the same
		select * from tblIndCustomers union select * from tblUkCustomers
		select * from tblIndCustomers union all select * from tblUkCustomers

		- union removes duplicare records, whereas union all doesnt.
		- union has to perform distinct sort to remove duplicates, which makes it less faster than union all.

		- Difference between Union and Join
			Union combines rows from 2 or more tables, whereas Joins combine columns from 2 or more tables.

-----------------------------
#Ref Video 18,19
	Stored Procedures
		- is a group of T-Sql(Transact SQL) statement. 
		when we want to execute same piece of query again and again we can use a sp and we can call it by name only.

		-query to create a sp
			create proc sp_getEmployee
			as
			begin
			select Name,Gender from tblEmployee
			end

		- check if the sp got created
			Expand the Database -> Programability -> Stored Procedures

		- sp with parameters 
			create proc sp_getEmployeeByDepIdGender
			@DepId int,
			@Gender nvarchar(10)
			as 
			begin
			select * from tblEmployee where Gender=@Gender AND DepId=@DepId
			end

		- We have to remember the order of parameter or we have to pass the values with parameter name.

		- check the text of sp
			right click on sp -> Script Stored Procedures -> Create To -> New Query Editor window
			query -> sp_helptext proc_name

		- delete a procedure
			drop proc proc_name

		- encrypt a sp
			alter proc sp_getEmployee
			with encryption
			as
			begin
			select Name,Gender from tblEmployee
			end

		- sp with output parameter
			- to create sp wih output parameter , we use keyword out or output.
			- if we dont specify the output keyword, when executig sp the variable will be null
			query
				create proc spEmployeeByGender 
				@Gender nvarchar(20),
				@Count int out
				as
				begin
					select @Count= Count(Id) from tblEmployee where Gender=@Gender
				end

				declare @EmpCount int
				exec spEmployeeByGender 'Male',@EmpCount output
				print @EmpCount

		- useful system stored Procedures
			- sp_help proc_name -> we can et te name,type and parameters of sp
				sortcut -> Alt+F1 , can be used with tables too.
			- sp_helptext proc_name -> text of sp
			- sp_depends proc_name -> to wic table te sp depends,can be used with table too.

		- Difference b/n output parameter and return value
			- When we right click a sp and select Execute Stored Procedure -> it will return two values ,it returns an intger status variable, usually zero indicates success and non zero indicates failure. 
			- output parameter query
				create proc spGetEmpCount 
				@EmpCount int output
				as
				begin
					select @EmpCount = count(Id) from tblEmployee
				end

				declare @TotalEmp int
				exec spGetEmpCount @TotalEmp out
				print @TotalEmp

			- return value query
				create proc spGetEmpCount1
				as
				begin
					return (select count(Id) from tblEmployee)
				end

				declare @TotalCount int
				exec @TotalCount = spGetEmpCount1
				print @TotalCount

			- output parameter to print string value
				create proc empNameById1
				@Id int,
				@Name nvarchar(20) output
				as
				begin 
					select @Name = Name from tblEmployee where Id=@Id
				end

				declare @Name nvarchar(20) 
				execute empNameById1 1,@Name out
				print 'Name : '+@Name

			- return value to print string value
				create proc empNameById2
				@Id int
				as
				begin
					return (select Name from tblEmployee where Id=@Id)
				end

				declare @N nvarchar(20)
				exec @N=empNameById2 1
				print @N

				Note: It will throw an error because return value can only return one digit integer and not string.

			- summary 
			Return State Value 		output parameters
			only int data type		any datatype 
			only one value 			more than one also
			used to conver success 	use to return values 
			 or failure				 like name,count etc.

--------------------
#Ref Video 21
	Advantages of Stored Procedures
	- Execution Plan retention and reusability
	- Reduces network traffic
	- Code reusability and better maintainability
	- Better Security
	- Avoid SQL Injection Attacks
---------------------
#Ref Video 22,23,24
Check system defined functions list
	- Expand any Database -> Programability -> Functions -> System Functions -> String Functions
		 

Function 			Purpose
ASCII(char)			returns ASCII code of character expression 
CHAR(int) 			convert int ascii code to character (range - 0 to 255)
LTRIM(char)			removes blanks from left side of character expression.
RTRIM(char)			removes blanks from right side of character
Lower(char)			convert all the characters to lowercase
Upper(char)			convert all the characters to uppercae
Reverse?(string)    reverses all the characters of a given string
LEN(string)			count the total character or the string, calclates the spaces at the begining or middle of the string and not the end.

LEFT(char,int)				returns the specified number of charaters from the left side of the given string.
RIGHT(char,int)				returns the specified number of charaters from the right side of the given string.
CHARINDEX(char,char,int)	CHARINDEX(exp to find,exp to search,start location) returns the starting position of the specific expression in a character string.
								start location is optional.eg: CHARINDEX('@','sara@aaa.com',1)
SUBSTRING(char,int,int)		SUBSTRING(exp,start,length) returns part of the string from given string.

REPLICATE(char,int)			REPLICATE(String to be replicated,number of times to replicate)
							Repeats the string for the specific number of times.

SPACE(int)					gives number of spaces specified
PATINDEX(char,char)			PATINDEX('%Pattern%',exp) , returns starting position of the first occurence of a pattern in a specified expression.
							similar to CHARINDEX but also supports wildcards. If pattern not found it will return 0.
REPLACE(char,char,char) 	REPLACE(string exp, pattern,replacement value) Replaces all occurence of specified string value with another string value.
STUFF(char,int,int,char)	STUFF(exp,start,length,replacement exp) Inserts replacement expression at the start position specified and remove removes character specified using length parameter.

-----------------------
#Ref Video 25 
Data Type 					Format
time 						hh:mm:ss[.nnnnnnn]
date 						YYYY-MM-DD
smalldatetime				YYYY-MM-DD hh:mm:ss
datetime 					YYYY-MM-DD hh:mm:ss[.nn]
datetime2 					YYYY-MM-DD hh:mm:ss[.nnnnnnn]
datetimeoffset				YYYY-MM-DD hh:mm:ss[.nnnnnnn][+|-]hh:mm

UTC - Coordinated Universal Time
	based on UTC the world regulates clock and time.
	UTC and GMT are slightly different.

Functions					DateTime Format 						Description
GETDATE() 					2021-11-04 23:18:31.223					Commonly Used
CURRENT_TIMESTAMP			2021-11-04 23:19:38.557					ANSI SQL equivalent to GETDATE
SYSDATETIME()				2021-11-04 23:20:14.3929406				More fractional seconds precision
SYSDATETIMEOFFSET()			2021-11-04 23:20:45.4907968 +05:30		More f_s_p + time zone offset 
GETUTCDATE()				2021-11-04 17:51:21.113					UTC DateTime
SYSUTCDATETIME()			2021-11-04 17:51:59.2680955				UTC DateTime + more f_s_p

-----------------------
#Ref Video 26
ISDATE() - checks for valid date,time or datetime
			returns 0 for success and 1 for failure
			For datetime2,datetimeoffset values IsDate returns 0.
DAY()		returns the day number of given date.
MONTH()		returns the month number of given date.
YEAR()		returns the year number of given date
DateName    DateName(DatePart,Date) returns a string that represents a part of the given date.

DatePart		Abbreviation
year 			YY,YYYY
quater 			qq,q
month			mm,m 
dayofyear		dy,y 
day 			dd,d 
week 			wk,ww 
weekday 		dw
hour			hh
minute 			mi,n 
second 			ss,s 
millisecond 	ms 
microsecond 	mcs 
nanosecond 		ns 
TZoffset 		tz 
-----------------------
#Ref Video 27
DatePart 	DateName(DatePart,Date) returns an integer. similar to DateName
DateAdd 	DateAdd(DatePart,NumberToAdd,date) returns datetime after adding specified NumberToAdd in the month,day,year,hour,second etc.
DateDiff 	DateDiff(DatePart,startdate,enddate) returns count of specified DatePart boundary crossed between specified startdate and enddate.
-----------------------
#Ref Video 28
CAST(expression AS data_type[(length)])
CONVERT(data_type[(length)],expression,[style])

style 	DateFormat
101		mm/dd/yyyy
102		yy.mm.dd
103 	dd/mm/yyyy
104		dd.mm.yy
105		dd-mm-yy

-----------------------
#Ref Video
ABS(numeric_expression)			returns the absolute(positive) number.
CEILING(numeric_expression)		returns smallest integer value greater than or equal to parameter.
FLOOR(numeric_expression)		returns the largest integer value less than or equal to the parameter.
POWER(expression,power)			returns power of specified expression to specified power.
SQUARE(Number)					returns square of given number
SQRT(Number)					returns sqare root of given number
RAND([Seed_Value]) 				returns a random float value between 0 and 1.
								returns same value for the same seed.
ROUND(numeric_expression, length,[function])
	1. Numeric Expression   	number that we want to Round
	2. Length 					number of digits we want to round to.if +ve the rounding is applied to decimal part
								if -ve rounding is applied to number before the decimal.
	3. optional func parameter	used to indicate rounding or truncation operation.
								0 indicates rounding, non 0 indicates truncation. Default if not specified is 0.

	Examples
	- select round(850.556,2) -- returns 850.560
	- select round(850.556,2,1) -- returns 850.550
	- select round(850.556,1) -- returns 850.600
	- select round(850.556,1,1) -- returns 850.500	
	- select round(850.556,-2) -- returns 900.000
	- select round(850.556,-1) -- returns 850.000

---------------------------------------
#Ref Video 30,31,32
Three types of User Defined Function
- Scalar functions
- Inline table valued functions
- Multi-statement table valued functions

Scalar functions
- may/may not have parameters but always return a single(scalar) value.
	return value can be of any datatype expect text,ntext,image,cursor,timestamp
- We can not use stored procedures in a select or where clause. Function have this ability.
- To see the content of scalar function we use sp_helptext
- To alter a function use Alter function function_name
- To delete a function use drop function function_name

Inline Table valued function 
- returns a table.
- we specify the table as return type instead of any scalar datatype.
- function body is not enclosed between Begin and End blocks.
- the structure of the able tahat gets returned is determined by the select statement within the function.
- can be used to achieve the functionality of parameterised views.
- table returned can also be used in joins with other tables.

Multi-Statement Table Valued function
- We specify the the structure of the table that gets returned.
- It has Begin and End blocks.
- Always prefer to use ITV functions over MSTV functions
- Its possible to update the underlying table using ITV functions, but not possible with MSTV functions.

-----------------------------------
#Ref Video 33
Deterministic functions
- always returnssame result anytime they are called with a specific set of input values and gives the same state of the database.
	eg: Square(),Power(),Sum(),Avg(),Count() etc.

Nondeterministic functions
- may return different values each time they are called with a specific set of input values even if the database state that they access remains the same.
	eg: GetDate(),CURRENT_TIMESTAMP

Rand() function
- is non deterministic function , but if the seed value is provided it becomes deterministic

Encrypting a function
- Use WithEncryption to encrypt the text of function

Schema Binding option
- specifies that function is bound to the database object that it references.
- when this option is specified,the base object cannot be modified in any way that would affect the function defination.
-the function defination must be dropped to remove dependencies on the object that is to be modified.
- Use WITHSCHEMABINDING 
---------------------
#Ref Video 34
What are Temporary Tables?
- Very similar to Permanent Tables. Permanent tables get created in database we specify and remain their untill we delete them.
- Temporary tables get created in TempDB and are automatically deleted when they are no longer in use.

Types of Temporary tables
1. Local Temporary Tables
2. Global Temporary Tables

Local Temporary Tables
- Created same as Permanent Table but only # is prefixed before table name.
- Created in TempDB. Name of table is suffixed with lot of underscore and numbers , so to to find it we have to use like in our query.
	- select name from tempdb..sysobjects where name like '#PersonDetails%'
- Is available only for the connection that has created that table.
- Is automatically dropped, when the connection that has created it is closed.
- we can explicitely drop it using -> drop table #PersonDetails

 - If Temporary table is created inside a stored procedure, it automatically dropped upo the completion of execution of sp.
 - It is possible for different connection to create temporary table with same name.

Global Temporary Tables
- To create prefix the name with 2#(##) symbols.
	create table ##EmployeeDetails(Id int,Name nvarchar(20))
- Visible to all connections and are only destroyed when the last connection referencing the table is closed.
- Global temp table has to be unique, if we inspect the object explorer window we can see no random numbers suffixed at the end of that table name.

------------------------------------------
#Ref Video 35,36
Why Indexes
- Indexes are used by queries to find data from tables quickly.
- Indexes are created on table or view, is very similar to an index we find in a book.
- If there is no index then query engine checks every row in the table from begining to end which is bad for performance.
- Consider a query - select * from Employees where salary > 5000 and Salary < 7000
	If there is no index in salary column , query engine need to search each record for this condition.

Creating an Index 
- create index IX_tblEmployee_Salary on tblEmployee (Salary Asc)

Check the index
- sp_Helpindex tblEmployee
- Databas -> Table -> Indexes

Deleteing an index
- drop index tblEmployee.IX_tblEmployee_Salary

Index Types
1. Clustered
2. NonClustered
3. Unique
4. Filtered
5. XML
6. Full text
7. Spatial
8. Columnstore
9. Index with included columns
10. Index with computed columns

Clustered Index
- A clustered index determines the physical order of data which get stored in a table.
	For this reason a table can have only one clustered index.
- Create a table tblEmployee and mark Id as primary key. Primary key contraint create a clustered index automatically if no clustered index already exist on the table.
	To confirm -> exec sp_helpindex tblEmployee
	Now insert some values in table but not in sequential order. 
	When you now try to select all the data from tblEmployee you will find the data are displayed in ascending order.

 - We cant create more than one clustered index in a table but we can create a clustered index in combination with two columns - lets prove it
 	Drop the automatically created primary key clustered index -> from object explorer
	- create clustered index IX_tblEmployee_Gender_Salary on tblEmployee(Gender desc , Salary asc)
	- now the data is arranged first with Gender and then with salary.

Non clustered Index
- The non clustered index is stored seperately from the actual data.
	A table can have more than one non clustered index just like how a book can have index by chapters at the begining and other by common terms at the end.
- In the index itself , the data get stored in ascending or descending order of the index key, which doesnot anyway influence the storage of data in the table.
- create non clustered index IX_tblEmployee_Name on tblEmployee(Name)

Difference b/n Clustered and NonClustered Index
1. Only one clustered index per table , whereas more than one in case of non clustered.
2. Clustered is faster because non clustered has to refer back to the table if selected column is not present in the index.
3. Clustered index determines the storage order of rows in the table, hencedoesnot require additional spaces.
	In case of non clustered , it is stored seperately from the table, and additional storage space is required.
---------------------------------------------------------------
#Ref Video 37
Unique Index
- used to enforce uniqueness of key values in the index.
- by default Primary Key constraint , creates a unique clustered index.
- uniqueness is the property of an index and both clustered and non clustered indexes can be unique.
	create unique NonClustered Index UIX_tblEmployee_FirstName_LastName on tblEmployee(FirstName,LastName)

Difference between Unique constraint and Unique index
- there is no difference b/n these. Infact when we add a unique constraint a unique index gets created behind the scenes.

Points to remember
- By default a primary key constraint, creates a unique clustered index, whereas a unique constraint creates a unique non clustered index. These defaults can be changed if we wish to.
- A unique constraint or a unique index cannot be created on an existing table, if the table contains duplicate values in the key columns .
	Obviously to solve this remove the key columns from the index defination or update or delete or update the duplicate values.

---------------------
#Ref Video 38
Advantages of Indexes
- Select statements became faster.
- Delete and Update become faster.
- Order by ascending and descending becomes faster
- Group by can be faster.

Disadvantages of Indexes
- Adittional Disk spaces - spaces to store indexes along with table records
- Insert , Update, Delete can become slow- updation in one records needs to be updated in all related indexes.

Covering Query
- If all the columns that you have requested in the selected clause of the query, are present in the index,then there is no need to lookup in the table again.
	The requested columns data can simply be returned from the index.

- A clustered index always covers a query, since it contains all the data in a table. 
	A composite index is an index on two or more columns. Both clustered and non-clustered indexes can be composite indexes.
	To a certain extent , a composite index can cover a query.
-------------------------
#Rev Video 39
View
- is nothing more than a saved sql query.
	can also be considered as virtual table.

Advantages of using Views
-  can be used to reduce the complexity of database schema.
- can be used as a mechanism to implement rows and column level security.
	row  level-only view IT depar, column level - salary column is not included in view.
- can be used to present aggregated data and hide detailes data.

Modify a view
- Alter view statement

Delete a view
- Drop view vwName

Q. Views are just a virtual view of an underlying base table , So is it possible to update it?
A. Yes it is possible to insert,update and delete from the base table through the view.

Note: If a view is based on multiple tables, and if we update the view, it may not update the underlying base tables correctly.
	To correctly update a view , that is based on multiple table , INSTEAD OF triggers are used.

-------------------------
#Ref Video 41
Indexed Views
- A stadard or non-indexed view is just a virtual table and it does not store any data by default
	However when we create an index on a view the view gets mterialized. This means view is now capable of storing data.
	In Sql - Indexed View , In Oracle - Materialized Views.

Guidelines for creating indexed views
1. The view should be created with SchemaBinding option.
2. If the aggregate function in the Select List ,references an expression , and if there is a possibility for that expression to become null , then a replacement value should be specified.
3. If Group By  is specified the view select list must contain a COUNT_BIG(*) expression 
4. The base table in the view, sshould be referenced with two part name.
	- create unique clustered index UIX_vwTotalSalaryByProduct_Name on vWTotalSalesByProduct(Name)

-------------------------
#Ref Video 42
1. We cannot pass parameters to a view. Table values functions are an excellent replacement for parameterised views.
2. Rules and Defaults cannot be associated with views.
3. The Order By clause is invalid in views unless TOP or FOR XML is also specified.
4. Views can not be based on temporary tables.

-------------------------
#Ref Video 43
Triggers are of 3 types:
1. DML Triggers
2. DDL Triggers
3. LOGON Triggers

DML Triggers -  Fired automatically in response to DML events(Insert,Update,Delete)
	DML Triggers are of two types
	1. After triggers/ For Triggers
	2. Instead of Triggers

	After Triggers - The insert,update,delete statement causes an after trigger to fire after the respective statement complete execution.
		Trigger for update event ,makes use of both inserted and deleted tables. The inserted table contains the updated data and the deleted ta contains the old data.
	Instead of triggers - The insert,update,delete statement causes an instead of trigger to fire after respective statement complete execution.
		To insert/update a view having the combination of join of two or more base table, it is not directly possible. So to achieve this we use instead of triggers.

In most cases Joins are faster than Sun-Queries.However in case where you only need a subset of record from the table that you are joining with, sub-queries can be faster.










			  



	